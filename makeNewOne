#!/bin/bash

EXIT_SUCCESS=0
RUNNING_MODE_NOT_SET=-1
NUMBER_MODEL_NOT_SET=-2
COMPILE_MODE_NOT_SET=-3

ProjectsPath=$(pwd)/Projects

TargetList=(
    "Build-All"
    "ramips-skylab_skw92a-libremesh"
    "ramips-cuman_ac12g-libremesh"
    "ramips-cuman_ac12m-libremesh"
);

function PrintSupportedModels() {
    local N=0;
    for Model in "${TargetList[@]}"; do
        printf "%-30s\tâ„–:%2d\n" $Model $N;
        ((N++));
    done;
};

function GetBuildModel(){
    local ModelNum=$1;
    local MaxIndex=$((${#TargetList[@]} - 1));
    if ! [[ "$ModelNum" =~ ^[0-9]+$ ]]; then
        echo "[error]: Model number is invalid: $ModelNum";
        exit $NUMBER_MODEL_NOT_SET;
    fi;
    if (( ModelNum >= 0 && ModelNum <= MaxIndex )); then
        echo ${TargetList[$ModelNum]};
    else
        echo "[error]: Model number is out of range: $ModelNum";
        exit $NUMBER_MODEL_NOT_SET;
    fi;
};

function GenerateBanner(){
    BannerFile="./package/base-files/files/etc/banner";
    cp Banner.default $BannerFile;
    SelectedModel=$1;
    CurrentDate=$(date +"%Y-%m-%d")
    echo "| Release info: $CurrentDate, $SelectedModel" >> $BannerFile
    echo "|----------------------------------------------------------|" >> $BannerFile
};

function GetModelTarget(){
    local SelectedModel=$1; echo ${SelectedModel%%-*};
};

function GetConfig(){
    cp -f $ProjectsPath/$1/$1.config ./.config;
};

function SetConfig(){
    cp -f ./.config $ProjectsPath/$1/$1.config;
};

function ClearModelCache(){
    ModelTarget=$1;
    rm -rf ./files/* && rmdir ./files;
    rm -rf ./target/linux/$ModelTarget/base-files/sbin/*
    rm -rf ./target/linux/$ModelTarget/base-files/etc/uci-defaults/*
};

function ClearBuildArtifacts(){
    TargetSystem=$1;
    rm -rf FirmwareBin/* && rmdir FirmwareBin;
    for Directory in ./bin/targets/$TargetSystem/*; do
        if [ -d "$Directory" ]; then
            rm -rf "$Directory"/*.manifest;
            rm -rf "$Directory"/*.bin;
        fi;
    done;
};

function MakeSelectedModel()    {
    ModelNum=$1;
    CompilationMode=$2;
    if [ $ModelNum = "0" ];then
        echo "[..]: Making ALL models"
        for Idx in $(seq 1 1 $LastModelNum);do
            MakeSelectedModel $Idx $CompilationMode;
        done;
        echo "[ok]: All Cuman-models successfully compiled!";
        exit $EXIT_SUCCESS;
    fi;
    SelectedModel=$(GetBuildModel $ModelNum);
    GenerateBanner $SelectedModel;
    ModelTarget=$(GetModelTarget $SelectedModel);
    ClearBuildArtifacts $ModelTarget 2>/dev/null;
    GetConfig $SelectedModel;
    #-------------------------------------------------------------------------------------------------
    cp -rf $ProjectsPath/$SelectedModel/sbin/* ./target/linux/$ModelTarget/base-files/sbin/
    cp -rf $ProjectsPath/$SelectedModel/uci-defaults/* ./target/linux/$ModelTarget/base-files/etc/uci-defaults/
    cp -rf $ProjectsPath/$SelectedModel/files/* ./files/

#     API_FOLDER=$ProjectsPath/$SelectedModel/usr/
#     if [ -d "$API_FOLDER" ]; then
#         mkdir -p ./files/usr/
#         rsync -av --exclude='**/doc/' "$API_FOLDER" ./files/usr/
#     fi;
    #-------------------------------------------------------------------------------------------------
    if [ -z "$CompilationMode" ];then
        echo "[error] Compilation mode didn't selected"
        exit $COMPILE_MODE_NOT_SET
    fi;
    make defconfig
    make download
    if [ $CompilationMode = "debug" ];then
        make -j1 V=sc
    elif [ $CompilationMode = "release" ];then
        make -j$(nproc)
    fi;
    mkdir -p FirmwareBin/
    ResultBin=$(find bin/targets/ramips/ -path "*$(echo "$SelectedModel" | cut -d'-' -f2)*" | grep ".bin")
    mv $ResultBin ./FirmwareBin/$SelectedModel-$(date +"%d%m%y_%H%M%S").bin
    ClearModelCache $ModelTarget 2>/dev/null;
};

function main(){
    if [ $# -eq 0 ];then
        echo "[error]: Running mode is not set...";
        exit $RUNNING_MODE_NOT_SET;
    fi;
    ModeArg=$1;
    mkdir -p ./files/
    case $ModeArg in
        "models")
            PrintSupportedModels;
            ;;
        "build")
            ModelNum=$2; CompilationMode=$3;
            MakeSelectedModel $ModelNum $CompilationMode;
            ;;
        "menu")
            ModelNum=$2;
            SelectedModel=$(GetBuildModel $ModelNum);
            GetConfig $SelectedModel;
            make menuconfig;
            read -p 'Do you want to set this profile with new settings?[y/N]' Answer;
            if [ $Answer = "y" ]; then
                SetConfig $SelectedModel;
                echo "[ok]: Configuration file of the selected model updated.";
            fi;
            ;;
    esac;
    exit $EXIT_SUCCESS;
};
main "$@" # <--- entryPoint
